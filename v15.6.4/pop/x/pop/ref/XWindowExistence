REF XWindowExistence                             A. Schoter, August 1991

        COPYRIGHT University of Sussex 1991. All Rights Reserved.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<                             >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<       X WINDOW EXISTENCE    >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<                             >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

The procedures described  in this  REF file  implement the  equivalent C
functions for window creation and destruction.



---------------------
1  List of procedures
---------------------

The procedures below are made available by doing:

         uses xlib;
         uses XWindowExistence;

For details see:

                     Xlib - C Language X Interface,
                       MIT X Consortium Standard,
                         X Version 11, Release 4

        Copyright (C) 1985, 1986, 1987, 1988, 1989 Massachusetts
        Institute of Technology,  Cambridge, Massachusetts,  and
        Digital Equipment Corporation, Maynard, Massachusetts.


XCreateSimpleWindow(DspPtr,xid1,int1,int2,uint1,uint2,uint3, [procedure]
                        ulong1,ulong1) -> xid2
        Creates an  unmapped  subwindow  (xid2)  of  the  parent  window
        specified by  xid1. The  created window  will always  be  wholly
        contained within its  parent, any part  of the window  extending
        outside  its  parent  window  will  be  clipped.  The  X   and Y
        coordinates specified by  int1 and int2  represent the top  left
        outside corner of the new window's borders. They are relative to
        the inside of the parent window's borders. The width and  height
        specified by the uint1 and uint2 parameters are the new window's
        inside dimensions  -  they  do  not  include  the  new  window's
        borders, which  are  entirely outside  of  the window.  The  new
        window will have  a border uint3  pixels wide. ulong1  specifies
        the border  and ULONG2  specifies  the background.  The  created
        window is not yet displayed (`mapped') on the user's display; to
        display the  window, call  XMapWindow. The  window will  not  be
        visible on the  screen unless it  and all of  its ancestors  are
        `mapped', and it is not obscured  by any of its ancestors.  This
        procedure returns the window id of the created window.


XDestroyWindow(DspPtr,xid)                                   [procedure]
        Unmaps and destroys the window specified  by xid and all of  its
        subwindows.  The  windows  should  never  again  be  referenced.
        Destroying a  mapped window  will  generate exposure  events  on
        other windows that were obscured by the window being  destroyed.
        XCloseDisplay automatically destroys all windows that have  been
        created on that server.


XDestroySubwindows(DspPtr,xid)                               [procedure]
        Destroys all  subwindows of  the window  specified by  xid.  The
        subwindows should never again be referenced.  XDestroySubwindows
        may generate exposure events on  the main window, if any  mapped
        subwindows were actually destroyed. Note that this is MUCH  more
        efficient than deleting many windows one  at a time, as much  of
        the work need  only be  performed once  for all  of the  windows
        rather than for each window.


XCreateWindow(DspPtr,xid1,int1,int2,uint1,uint2,uint3,int3,  [procedure]
                uint4,visptr,ulong,xsetwinattptr) -> xid2
        This procedure implements the equivalent C function.




--- C.x/x/pop/ref/XWindowExistence
--- Copyright University of Sussex 1991. All rights reserved.
