REF NETGENERICS                                Julian Clinton  Jan 1990
                                           Updated J. Clinton  Aug 1992

        Copyright Integral Solutions Ltd. All Rights Reserved

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<                             >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<    FUNCTIONS & VARIABLES    >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<      IN LIB NETGENERICS     >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<                             >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

         CONTENTS - (Use <ENTER> g to access required sections)

 -- Before Loading The Library
 -- Current Network, Example Set And Datatype
 -- Software Version
 -- Datatypes
 -- Example Sets
 -- Networks
 -- Training
 -- Functions For Converting Example Data
 -- Analysing Results From Examples Applied To Networks

-- Before Loading The Library -----------------------------------------

All the libraries  available in Poplog-Neural  make use of  a number  of
environment variables. These are:

1. HOST_TYPE

Set to be the name of the machine being used e.g. sun3, sun4, bobcat,
vax etc.

2. NEURAL_F77

Specifies whether a Fortran 77 compiler is available. This should be set
accordingly to "yes" or "no".


These should be defined in your .login (UNIX) or LOGIN.COM (VMS) file.


-- Current Network, Example Set And Datatype --------------------------

nn_current_net                                         [active variable]
        Holds the name of the  current neural network. Initial value  is
        <false>.


nn_current_egs                                         [active variable]
        Holds the  name of  the current  example set.  Initial value  is
        <false>.


nn_current_dt                                          [active variable]
        Holds the  name  of  the  current  datatype.  Initial  value  is
        <false>.


-- Software Version ---------------------------------------------------

nn_version                                                    [constant]
        A real number  specifying the  software release  version of  the
        Poplog-Neural package.


-- Datatypes ----------------------------------------------------------

These are described in REF *DATATYPES.


-- Example Sets -------------------------------------------------------

These are described in REF *EXAMPLESETS.


-- Networks -----------------------------------------------------------

These are described in REF *NETWORKS.


-- Training -----------------------------------------------------------

These are described in REF *NETTRAINING.


-- Functions For Converting Example Data ------------------------------

nn_parse_example(LIST, TYPE_LIST, VECTOR)                    [procedure]
        Takes an  example list  and  a type  list, parses  the  examples
        according to the types specified  and stores the results in  the
        supplied vector.


nn_unparse_example(VECTOR, TYPE_LIST) -> LIST                [procedure]
        Takes a  vector and  a  type list,  converts the  vector  from a
        series of real numbers into a list of "higher" level types (e.g.
        boolean value, integer, set member).


-- Analysing Results From Examples Applied To Networks ----------------

nn_result_diffs(ACTUAL, TARGET) -> DIFFSLIST                 [procedure]
        -nn_result_diffs- takes the list of actual results, the list  of
        target results  and returns  a list  of indices  of the  results
        where the results differed from the target results.


nn_result_accuracy(EXAMPLE_SET, NETWORK) -> ACCURACY         [procedure]
        -nn_result_accuracy- applies  an example  set to  a network  and
        returns the  percentage of  correct  results against  the  total
        number of results.


nn_result_error(EXAMPLE_SET) -> ERROR                        [procedure]
        -nn_result_error-  takes  an   example  set   and  returns   how
        accurately a network responded to the given example set. It does
        this by looking through each  example and for each output  unit,
        squaring the difference between the actual and the target  value
        of the unit. The  value for each example  is halved to give  the
        error for that  example which is  held as a  number in a  vector
        held in the EG_ERROR slot of the example set. The ERROR returned
        by the function is the sum of the errors for the example set. If
        the output of the network is not defined (e.g. for a competitive
        learning network) then the error is returned as 0.0.


--- $popneural/ref/netgenerics
--- Copyright Integral Solutions Ltd. 1992. All rights reserved. ---
