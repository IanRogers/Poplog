HELP LOGOPTIONS                          Julian Clinton  Feb 1990


This file describes the options available on the Log Options Menu.


         CONTENTS - (Use <ENTER> g to access required sections)

 -- 'Write logfile'
 -- 'Logfile name'
 -- 'Log frequency'
 -- 'Include accuracy'
 -- 'Include test set'
 -- 'Save network after log'
 -- 'Echo to screen'
 -- Example Output To A Log File

-- 'Write logfile' ----------------------------------------------------

This option specifies whether a log file should be written. The boolean
value is held in the variable LOGFILEWRITE. This is an active variable
which adds/deletes the function NN_LOGFILE to/from the list NN_EVENTS.
However, a log file will not be written if the frequency of writing
(held in LOGFREQUENCY) is 0.                    


-- 'Logfile name' -----------------------------------------------------

The option can be used to change the name of the logfile. The variable
LOGFILENAME is used to store the name of the file as a string.


-- 'Log frequency' ----------------------------------------------------

The frequency with which the log file is written is specified by the
integer held in the variable LOGFREQUENCY. This is an active variable
which changes the value of NN_EVENT_TIMER. If the value of this variable
is 0 then the file will not be written (even if the boolean LOGFILEWRITE
is TRUE).


-- 'Include accuracy' -------------------------------------------------

This option is used to define whether the accuracy with which the
network is learning the current example set (as defined by
NN_CURRENT_NET and NN_CURRENT_EGS). The function NN_RESULT_ACCURACY is
called with NN_CURRENT_EGS and NN_CURRENT_NET as arguments and the value
(a real number between 0 and 1) is written to the log file. The boolean
value of the variable LOGACCURACY specifies whether the accuracy is
tested. Note that for networks where no desired output is specified
(such as competitive learning networks), the accuracy will always be
1.0.

-- 'Include test set' -------------------------------------------------

It is often useful to print the input and output (and target output if
appropriate) of the network for each example in the training set. By
setting this option (a boolean held in the variable LOGTESTSET), each
example in the training set will be written to the file as input and
actual output or input, actual output and target output. If the target
output is defined then this is compared with the actual results and a
"-" or a "X" is placed by the side of the output to show whether the
result was correct ("-") or incorrect ("X").


-- 'Save network after log' -------------------------------------------

If you wish to save the network each time a log file is written, setting
the value of this option (held in LOGSAVENET) to TRUE will save the
network in to a file. This is useful where a network may become
overtrained since it allows you to select the point where the network
appears to be sufficiently accurate. The name of the file where the
network is saved will be written to the log file.


-- 'Echo to screen' ---------------------------------------------------

If this option is set to true then certain pieces of information
being written to the log file are echoed to the terminal. The variable
LOGECHO is used to hold this option's value.


-- Example Output To A Log File ---------------------------------------

;;; ------------------------------------------------
;;; POPLOG-Neural logfile neural.log opened.
;;; Date    : Wed Feb 21 08:09:16 GMT 1990
;;; Network : xor_net, Example Set : xor_set
;;; ------------------------------------------------
;;; Number of training cycles : 200
;;; Response Accuracy         : 0.75
;;; Input, Output And Target Data:
;;; (Note: "-" means output was correct, "X" means output was incorrect)
;;; Example 1
;;;       input  : [<false> <false>]
;;;   -   output : [<false>]
;;;       target : [<false>]
;;; Example 2
;;;       input  : [<true> <false>]
;;;   -   output : [<true>]
;;;       target : [<true>]
;;; Example 3
;;;       input  : [<false> <true>]
;;;   -   output : [<true>]
;;;       target : [<true>]
;;; Example 4
;;;       input  : [<true> <true>]
;;;   X   output : [<true>]
;;;       target : [<false>]
;;;
;;; ------------------------------------------------
;;; Logfile closed.
;;; ------------------------------------------------
